下列说法中正确的是( B  )。
20世纪50年代提出子软件工程的概念
20世纪60年代提出了软件工程的概念
20 世纪70年代出现了客户机/服务器技术
20 世纪80年代软件工程学科达到成熟
软件危机的主要原因是( D  )。
软件工具落后
软件生产能力不足
实行严格的产品控制
软件本身的特点及开发方法
软件工程的3个要素是(  C )。
技术、方法和工具
方法、对象和类
方法、工具和过程
过程、模型和方法
在下列选项中，(  A )不属于软件工程学科研究的基本内容。
软件工程材料
软件工程方法
软件工程原理金
软件工程过程
增量模型本质上是一种( C  )
线性顺序模型
整体开发模型
非整体开发模型 
螺旋模型
软件过程是( D )。
特定的开发模型
一种软件求解的计算逻辑
软件开发活动的集合
软件生命周期模型
软件生命周期模型不包括( B  )。
瀑布模型
用例模型
增量模型
螺旋模型
包含风险分析的软件工程模型是( A  )。
螺旋模型
B瀑布模型
增量模型
喷泉模型
软件工程中描述生命周期的瀑布模型一般包括计划、需求分析、设计、编码、( D  )维护等几个阶段。
产品发布
版本更新
可行性分析
测试
软件开发的瀑布模型一般都将开发过程划分为:分析设计、编码和测试等阶段一般认为可能占用人员最多的阶段是(  D C )。
分析阶段
设计阶段
编码阶段
测试阶段
螺旋模型综合了( B  )的优点，并增加了风险分析。
增量模型和喷泉模型
瀑布模型和快速原型模型
瀑布模型和喷泉模型
快速原型模型和喷泉模型
可行性研究也称为( D  )。
技术可行性研究
操作可行性研究
经济可行性研究
项目论证
(  A )研究往往是系统开发难度最大的工作，是可行性研究的关键
技术可行性
操作可行性
经济可行性
风险可行性
软件硬件资源的有效性是进行( A  )研究的一方面。
技术可行性
经济可行性
社会可行性
操作可行性
软件开发计划是软件工程中的一种(  B )性文档。
技术
管理
检索
文献
在需求分析之前有必要进行(  B )工作。
程序设计
可行性研究
 E-R分析
行为建模
需求分析是一个(  D )，它应该贯穿于系统的整个生命周期,而不是仅仅属于软件生命周期早期的一项工作。
概念
工具
方法
过程
软件需求规格说明书的内容不应该包括( B  )。
对重要功能的描述
对算法的详细过程描述
C、对数据的要求
软件的性能
软件需求分析阶段的工作,可以分为以下4个方面:对问题的识别、分析与综合、编写需求分析文档以及( C  ),
总结
阶段性报告
需求分析评审
以上答案都不正确
进行需求分析可使用多种工具,但( B  )是不适用的。
数据流图
 PAD图
状态转换图
数据词典
数据流图是进行软件需求分析的常用图形工具，其基本图形符号是( C  )。
输入、输出、外部实体和加工
变换、加工、数据流和存储
加工、数据流、数据存储和外部实体
变换、数据存储、加工和数据流
结构化分析方法的基本思想是(  B )。
 自顶向下逐步分解
自底向上逐步分解
自顶向下逐步抽象
自底向上逐步抽象
在E-R图中,包含以下基本成分( D  )。
控制、关系、对象
数据、对象、实体
实体、关系、控制
实体、属性、关系
面向数据流的软件设计方法可将(  C )映射成软件结构。
控制结构
模块
数据流
事物流
模块的独立性是由内聚性和耦合性来度量的，其中内聚性是( C  )。
模块间的联系程度
信息隐藏程度
模块的功能强度
接口的复杂程度
Jackson 方法根据( C )来导出程序结构。
数据流图
 数据间的控制结构
 数据结构
 IPO图
为了提高模块的独立性，模块之间最好是( C )
公共环境耦合
控制耦合
数据耦合
特征耦合
在面向数据流的软件设计方法中，一般将信息流分为( D  )。
 数据流和控制流
 变换流和控制流
 事务流和控制流
 变换流和事务流
在面向对象技术中，对象是类的实例。对象有3种成分:( A  ). 属性和方法(或操作)。
标识
继承
封装
消息
以下哪一项不是面向对象的特征? (D)
多态性
继承性
封装性
过程调用
汽车有个发动机， 汽车和发动机之间的关系是( B  )关系。
组装
整体部分
分类
一般具体
(  D )是把对象的属性和操作结合在一起， 构成一个独立的对象，其内部信息对外界是隐藏的，外界只能通过有限的接口与对象发生联系。
多态性
继承
消息
封装
面向对象的主要特征除了对象唯一性、 封装、继承外，还有(  D )
兼容性
完整性
可移植性
多态性
关联是建立( B  )之间关系的一-种手段。
对象
类
功能
属性
面向对象软件技术的许多强有力的功能和突出的优点，都来源于把类组织成一个层次结构的系统，一个类的上层可以有父类，下层可以有子类，这种层次结构系统的一个重要性质是(B   ),一个子类获得其父类的全部描述(数据和操作)。
兼容性
继承性
复用性
多态性
所有的对象可以成为各种对象类，每个对象类都定义了一组(  D )。
说明
类型
过程
方法
通过执行对象的操作改变对象的属性，但它必须通过(  B )的传递。
操作
消息
信息
继承
UML是软件开发中的一个重要工具，它主要应用于(  D )。
基于螺旋模型的结构化方法
基于需求动态定义的原型化方法
基于数据的数据流开发方法
基于对象的面向对象的方法
( C )是从用户使用系统的角度描述系统功能的图形表达方法。
类图
活动图
用例图
状态图
( B )描述了 一组交互对象间的动态协作关系，它表示完成某项行为的对象和这些对象之间传递消息的时间顺序。
类图
顺序图
状态图
协作图
面向对象模型 主要由以下哪些模型组成? ( A  )
对象模型、动态模型、功能模型
对象模型、数据模型、功能模型
数据模型、动态模型、功能模型
对象模型、动态模型、数据模型
面向对象分析的首要工作是建立(   D)
系统的动态模型
系统的功能模型
基本的E-R图
问题的对象模型
面向对象的分析方法主要是建立3类模型，即(B   )。
系统模型、E-R模型、应用模型
对象模型、动态模型、功能模型
E-R模型、对象模型、功能模型
对象模型、动态模型、应用模型
在面向对象分析阶段建立的3个模型中，核心的模型是( C  )模型。
功能
动态
对象
分析
在面向对象的动态模型中，每张状态图表示(  A )的动态行为。
某一个类
有关联的若干类
一系列事件
一系列状态
在考察系统一些涉及时序和改变的状况时，要用动态模型来表示。动态模型着重于系统的控制逻辑，它包括两个图:事件追踪图和( B  )。
顺序图
状态图
系统结构图
数据流图
对象模型的描述工具是( D  )。
状态图
数据流图
结构图
对象图
功能模型中所有的( D  )往往形成一个层次结构，在这个层次结构中，一个数据流图的过程可以由下一层数据流图做进一步说明。
事件追踪图
物理模型图
状态迁移图
数据流图
程序编译器的体系结构适合使用(  A )。
仓库体系结构
模型-视图-控制器结构
客户机/服务器结构
以上都不是
网站系统是一个典型的(  C )。
仓库体系结构
胖客户机/服务器结构
瘦客户机/服务器结构
以上都不是
在分层体系结构中，( D )实现与实体对象相关的业务逻辑。
表示层
持久层
实体层
控制层
( B  )可以帮助人们简单方便地复用已经成功的设计或体系结构设计。
商业构件
设计模式
遗留系统
需求规格说明
( A  )用于封装具体的平台，从而使应用程序可以在不同的平台上运行。
抽象工厂模式
外观模式
观察者模式
以上都不是
面向对象设计阶段的主要任务是系统设计和( D  )
结构化设计
数据设计
面向对象程序设计
对象设计
只有类的共有界面的成员才能成为使用类的操作，这是软件设计的( B  )原则。
过程抽象
信息隐藏
功能抽象
共享性
(  B )是表达系统类及其相互联系的图示，它是面向对象设计的核心，是建立状态图、协作图和其他图的基础。
部署图
类图
组件图
配置图
下面所列的性质中，( D  )不属于面向对象设计的特性。
可视化
继承性
重用性
封装性
下列是面向对象设计方法中有关对象的叙述，其中( B  )是正确的。
对象在内存中没有它的存储区
对象的属性集合是它的特征表示
对象的定义与程序中类型的概念相当 
对象之间不能相互通信
在面向对象设计中，基于父类创建的子类具有父类的所有特性(属性和方法)，这一特点称为类的(  C )。
多态性
封装性
继承性
重用性
软件实现是软件产品由概念到实体的关键过程，它将(  B )的结果翻译成用某种程序设计语言编写的并且最终可以运行的程序代码。虽然软件的质量取决于软件设计，但是规范的程序设计风格将会给后期的软件维护带来不可忽视的影响。
软件设计
详细设计
架构设计
总体设计
(C   )是一种纯面向对象语言。
 C
 Pascal 
 Eiffel
 LISP
第-个体现结构化编程思想的程序设计语言是( C  )。
 FORTRAN
 C
 Pascal
 Cobol
面向对象设计的结果，实现时( A  )。
只能使用面向对象语言
只能使用非面向对象语言
可以使用第四代语言
既可使用面向对象语言，也可使用非面向对象语言
软件测试的目的是( B  )
证明软件是正确的
发现软件的错误
找出软件中的所有错误
评价软件的质量
白盒法又称为逻辑覆盖法，主要用于( D  )
确认测试
系统测试
α测试
单元测试
在软件工程中，白盒测试方法可用于测试程序的内部结构，此方法将程序作为( B  )。
循环的集合
路径的集合
目标的集合
地址的集合
成功的测试是指运行测试用例后( A  )
发现了程序错误
未发现程序错误
证明程序正确
改正了程序错误
白盒测试法是根据程序的( B  )来设计测试用例的方法。
输出数据
内部逻辑
功能
输人数据
在软件测试中，逻辑覆盖法主要用于( B )。
黑盒测试方法
白盒测试方法
灰盒测试方法
软件验收方法
黑盒测试是从(   )观点的测试，白盒测试是从( B  )观点的测试。
开发人员、管理人员
用户、开发人员
用户、管理人员
开发人员、用户
软件测试可能发现软件中的( D  ), 但不能证明软件
所有错误、没有错误
设计错误、没有错误
逻辑错误、没有错误
错误、没有错误
使用白盒测试方法时确定测试数据应根据(  A )和指定的覆盖标准。
程序的内部逻辑
程序的复杂程度
程序的难易程度
程序的功能
黑盒测试方法根据(  B )设计测试用例。
程序的调用规则
软件要完成的功能
模块间的逻辑关系
程序的数据结构
集成测试主要有两个方法:( C  )和 
白盒测试方法、黑盒测试方法
等价类划分方法.边缘值分析方法
渐增式测试方法、非渐增式测试方法
D因果图方法、错误推测方法
软件测试的目的是尽可能发现软件中的错误，通常( D  )是代码编写阶段可进行的测试，它是整个测试工作的基础。
集成测试
系统测试
验收测试
单元测试
单元测试主要针对模块的几个基本特征进行测试，该阶段不能完成的测试是(A   )。
系统功能
局部数据结构
重要的执行路径
错误处理
软件工程针对维护工作的主要目标是提高软件的可维护性，降低( B  )。
维护的效率
维护的工作量
文档
维护的代价
(  B )的作用是为进行有效定量的管理，把握软件工程过程的实际情况和它产生的产品质量。
估算
度量
风险分析
进度安排
 LOC和FP是两种不同的估算技术，但两者有许多共同的特征，只是LOC和FP技术对于分解需要的(  A )不同。
详细程度
分解要求
使用方法
改进过程
项目团队原来有6个成员，现在又增加了6个成员，这样沟通渠道增加了多少?( A  )
4.4倍
2倍
6倍
6条
下列哪项不是风险管理的过程? (  D )
风险规划
风险识别
风险评估
风险收集
按照软件配置管理的原始指导思想，受控制的对象应是(  C )。
软件过程
软件项目
软件配置项
软件元素
( D  )不是人们常用的评价软件质量的4个因素之一。
可理解性
可靠性
2.可维护性
易用性
使用软件时提出增加新功能就必须进行( C)维护。
预防性
适应性
完善性
纠错性
软件维护的副作用，是指(  C )。
运行时误操作
隐含的错误
因修改软件而造成的错误
开发时的错误
软件文档是软件工程实施的重要成分，它不仅是软件开发各阶段的重要依据，也影响软件的(  B)。
可用性
可维护性
可扩展性
可移植性
影响软件可维护性的主要因素不包括( C )。
可修改性
可测试性
可用性
可理解性
CMM表示( A  )。
软件过程成熟度模型
软件配置管理
软件质量认证
软件重用