模型是对现实的（抽象）和模拟，是对现实系统（本质）特征的一种抽象、简化和直观的描述。
模型具有（反映性）、直观性、（简化性）和抽象性等特征。
从抽象程度，可以把模型分为（概念模型）、逻辑模型和（物理模型）三种类型。
较之于其他模型，软件模型具有（建模对象特殊）、复杂性和（多样性）等特征。
软件模型是软件开发人员交流的（媒介），是软件升级和维护的（依据）。
软件建模技术的要素包括软件建模方法、（软件建模过程）、软件建模语言和（软件建模工具）。
从开发阶段看，软件建模有业务模型、（需求模型）、分析模型、（设计模型）和测试模型。
软件语言有软件需求定义语言、（软件设计语言）、软件建模语言、（软件结构描述语言）、软件程序设计语言等。
根据软件建模工具的独立性，把软件建模工具分为（独立软件）建模工具和（插件式软件）建模工具。
OMG在（1997）年把UML作为软件建模的标准，UML2.0版本是（2005）年颁布的
1995年，G.Booch和J.Rumbaugh在众多方法基础上提出了（UnifiedMethod0.8/统一方法0.8），2005年UML推出了其（UML2.0）版本。
作为一种建模语言，UML独立于软件建模（方法）和建模（过程）。
给出UML的两个特点：（统一标准）和（体系规范）。补充：（方便实用和独立于建模方法和建模过程）
可以把UML0版本的13种图划分（静态结构图）和（动态行为图）两种类型。
元模型划分为4个层次，上一层是对下一层的（抽象），下一层是上一层的（实例化）。
泛化关系等同于（继承关系）。
接口可以被分为（需求接口）和（供应接口）两种类型。
作用域是模型元素的（作用空间），也被称为命名空间，一个模型在其命名空间中可以被（唯一识别）。
模型元素的可见性有：公开、（私有）、保护和包几种形式。
UML的扩展机制包括（构造型）、标记值和（约束）。
用例图的要素包括（参与者）、用例和（关系）。
参与者的英文名称是（actor），参与者也被称为（活动者）。
参与者的类型可以是（人）、设备、（其他系统）和时间。
用例的英文名称是（usecase），也被称为（用况）和（用案）。
用例之间的关系有（泛化）、包含和（扩展）。
执行用例之前系统所处的状态被称为（前置条件），（事件流程）被称为用例执行的流程。
认识的对象可以是客观中一种具体的（事物），也可以是主观中的一个抽象（观念）。
软件中的对象是一段具有特定语法规则的（程序单元），它能够作为软件系统的一个相对独立的基本单位，在软件中承担确定的（服务职能）。
类描述具有相同性质的一组对象的（集合），类用（矩形）来表示。
按作用，可以把类分为（实体类），边界类和（控制类）几种类型。
接口可以分为（需求接口/需口）和（供应接口/供口）两种类型。
包是对模型元素进行（分组）的模型元素，包的英文名是（package）。
包的可见性有（公开）、私有和（保护）几种。
包的依赖关系可以分为（使用）、抽象和（跟踪）几种形式。
包导入可以分为（元素导入）和（包导入）两种类型。
包的包含关系是指一个包可以（嵌套）另外一个包作为自己的（子包）。
复合结构图也被称为（组合结构图），它用来描述类及其成员的（组成结构）及成员之间的连接关系。
协作的用途有（用例分析与设计建模）和（设计模式建模）。
动作是活动的基本（执行）单位，活动可以分解，动作一般不再（分解）。
令牌被分为（控制令牌）和（对象令牌）两种类型。
活动结点分为（动作结点）、对象结点和（控制结点）三种类型。
动作参数结点被形象地称为（引脚），它属于一种特殊的（对象）结点。
异常处理器包括（被保护结点）、异常处理结点和（异常对象结点）三个要素。
一个状态转换包括（触发事件）、监护条件和（转换动作）三要素。
无触发转换指（源状态执行完成后，不需要事件触发而自动转换到目标状态）。
状态机图描述一个对象在不同（事件）的驱动下发生的状态转移。
交互表示一组相关的（对象）为了完成某项任务，相互交换（信息）的情况。
顺序图强调在交互过程中，各交互的（对象实体）之间消息传输的（时序）关系。
消息是一种（命名）元素，它定义了在交互中，生命线之间的一种特定的（信息）。
在交互时间的时序中，同一消息的（发送）事件一定先于（接收）事件。
通信图也称为（协作图），用来描述参与交互的多个对象实体之间的（结构）关系。
交互概览图结合了（顺序图）和（活动图）两种图。
交互概览图是用来描述交互（流程）和交互（细节）的一种图。
以活动图为主线的交互概览图适合对复杂的（工作流）进行建模，而以顺序图为主线的交互概览图则适合描述（算法）流程。
时序图用来描述在一个（交互）中，参与交互的各个对象实体状态变化的（时序）关系。
时序图的要素包括：生命线、（状态）、事件、（时间刻度）和时序约束。
时序图的两种表示法为：（一般表示法）和（交错表示法）。
时序图可以用在（实时控制系统）和（事务处理系统）的时序逻辑建模。
构件也称为（组件），是被封装起来的软件（逻辑）部件。
构件通过（接口）向其他机构提供服务，获取其他构件服务的接口被称为（需口）。
两个具有相同接口的构件可以相互（替换）。构建内部的要素、行为和状态被（隐藏）。
外部视图也称为（黑盒视图），内部视图需要展示构件的（内部结构）。
构件的依赖关系又有（装配依赖）、关联依赖和（跟踪依赖）几种形式。
软件部署包括（软件环境的部署）和（软件制品的部署）两方面的工作。
制品表示可以在（结点）上独立部署的软件单元。制品一般以（文件）形式呈现。
承载是一种（依赖）关系，表示（制品）来源于所承载的模型元素。
制品之间存在（关联）、包含和（依赖）等关系。
结点表示可部署（软件制品），并能够从事计算的（物理设备）。
结点之间存在（通信）、包含和（使用）关系。
部署指把软件的各制品放置到（运行结点）上的工作，部署可表示为部署对结点的（依赖）关系。
